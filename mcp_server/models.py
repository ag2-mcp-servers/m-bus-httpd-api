# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T04:55:48+00:00

from __future__ import annotations

from enum import Enum
from typing import Optional

from pydantic import BaseModel, Field, RootModel, conint, constr


class Address(RootModel[constr(min_length=1, max_length=16)]):
    root: constr(min_length=1, max_length=16) = Field(
        ..., description='Slave address (primary or secondary)', examples=['48']
    )


class Baudrate(Enum):
    integer_300 = 300
    integer_600 = 600
    integer_1200 = 1200
    integer_2400 = 2400
    integer_4800 = 4800
    integer_9600 = 9600


class Device(RootModel[str]):
    root: str = Field(
        ...,
        description='The device the M-Bus is connected to - /dev/ is prepended to {device} by M-Bus HTTPD',
        examples=['ttyAMA0'],
    )


class Hat(BaseModel):
    product: Optional[str] = Field(
        None, description='Product', examples=['M-Bus Master']
    )
    productId: Optional[str] = Field(None, description='Product ID', examples=[1])
    productVer: Optional[str] = Field(None, description='Product Version', examples=[2])
    uuid: Optional[str] = Field(
        None, description='Hat UUID', examples=['148fa981-a33b-a07a-a13f-a2405d08e0fe']
    )
    vendor: Optional[str] = Field(
        None, description='Hat Vendor', examples=['packom.net']
    )


class Maxframes(RootModel[conint(ge=1, le=250)]):
    root: conint(ge=1, le=250) = Field(
        ..., description='Max frames to listen for', examples=[16]
    )


class MbusData(RootModel[str]):
    root: str = Field(
        ...,
        description='M-Bus device data as an XML document',
        examples=['<?xml version="1.0" encoding="UTF-8"?>...'],
    )


class Slaves(RootModel[str]):
    root: str = Field(
        ...,
        description='Output of libmbus scan command',
        examples=['Found a M-Bus device at address 1'],
    )


class TextError(RootModel[str]):
    root: str = Field(
        ...,
        description='Some error text',
        examples=['Device /dev/{device} does not exist'],
    )


class Yaml(RootModel[str]):
    root: str = Field(..., description='A YAML file', examples=['A YAML file'])
