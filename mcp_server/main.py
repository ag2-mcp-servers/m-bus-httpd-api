# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T04:55:48+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity

from models import (
    Address,
    Baudrate,
    Device,
    Hat,
    Maxframes,
    MbusData,
    Slaves,
    TextError,
    Yaml,
)

app = MCPProxy(
    title='M-Bus HTTPD API',
    version='0.3.5',
    servers=[{'url': 'http://mbus.local'}, {'url': '/'}],
)


@app.get(
    '/mbus/api',
    description=""" Returns this API specification """,
    tags=['hardware_accessory_management'],
)
def mbus_api():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/mbus/get/{device}/{baudrate}/{address}',
    description=""" Gets data from the slave identified by {address} """,
    tags=['device_interaction', 'hardware_accessory_management'],
)
def get(device: Device, baudrate: Baudrate = ..., address: Address = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/mbus/getMulti/{device}/{baudrate}/{address}/{maxframes}',
    description=""" Gets data from the slave identified by {address}, and supports multiple responses from the slave """,
    tags=['device_interaction', 'hardware_accessory_management'],
)
def get_multi(
    device: Device,
    baudrate: Baudrate = ...,
    address: Address = ...,
    maxframes: Maxframes = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mbus/hat',
    description=""" Gets Raspberry Pi Hat information """,
    tags=['device_interaction', 'hardware_accessory_management'],
)
def hat():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/mbus/hat/off',
    description=""" Turns off power to the M-Bus """,
    tags=['hardware_accessory_management'],
)
def hat_off():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/mbus/hat/on',
    description=""" Turns on power to the M-Bus """,
    tags=['device_interaction', 'hardware_accessory_management'],
)
def hat_on():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/mbus/scan/{device}/{baudrate}',
    description=""" Scan the specified device for slaves """,
    tags=['device_interaction', 'hardware_accessory_management'],
)
def scan(device: Device, baudrate: Baudrate = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
